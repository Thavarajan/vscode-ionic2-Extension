{
    "ionic Inifinite scroll call": {
        "prefix": "i2-infinite",
        "description": "ionic 2 Infinite scroll items update snippet with async operation",
        "body": [
            "doInfinite(${1:infiniteScroll}) {",
            "\t//Begin async operation",
            "\tsetTimeout(() => {",
            "\t\tthis.${2:items}.push(${3:values});",
            "\t//Async operation has ended",
            "\t${1:infiniteScroll}.complete();",
            "\t}, 500);",
            "}"
        ]
    },
    "ionic Alert": {
        "prefix": "i2-alert",
        "description": "ionic 2 alert snippet Import and Use the alertController, don't forget to insert int the constructor",
        "body": [
            "// Import the AlertController from ionic package ",
            "// Consume it in the constructor as 'alertCtrl' ",
            "let alert = this.alertCtrl.create({",
            "\ttitle: '${TM_FILENAME_BASE}',",
            "\tmessage: '${1:Message}',",
            "\tbuttons: [",
            "\t\t{",
            "\t\ttext: '${2:Cancel}', role: 'cancel',",
            "\t\thandler: () => {",
            "\t\t\tconsole.log('${2:Cancel} clicked');",
            "\t\t}",
            "\t\t}, {",
            "\t\t\ttext: '${3:Ok}',",
            "\t\t\thandler: () => {",
            "\t\t\tconsole.log('${3:Ok} clicked');",
            "\t\t}",
            "\t\t}",
            "\t]",
            "});",
            "alert.present();"
        ]
    },
    "ionic Custom Events": {
        "prefix": "i2-event",
        "description": "ionic 2 Event snippet Create and Consume",
        "body": [
            "// Import the Events from ionic package ",
            "// Consume it in the constructor as 'events'",
            "raiseEvent(${1:object}) {",
            "\tthis.events.publish('${1:object}:${2:event}', ${1:object});",
            "}",
            "captureEvent() {",
            "\tthis.events.subscribe('${1:object}:${2:event}', (${1:object}EventData) => {",
            "\t\t// userEventData is an array of parameters, so grab our first and only arg",
            "\t\tconsole.log(${1:object}EventData[0]);",
            "\t});",
            "}"
        ]
    },
    "ionic Custom Event raise": {
        "prefix": "i2-event-raise",
        "description": "ionic 2 Event snippet for Create",
        "body": [
            "// Import the Events from ionic package ",
            "// Consume it in the constructor as 'events'",
            "raiseEvent(${1:object}) {",
            "\tthis.events.publish('${1:object}:${2:event}', ${1:object});",
            "}"
        ]
    },
    "ionic Custom Event Handle": {
        "prefix": "i2-event-handle",
        "description": "ionic 2 Event snippet for Consume",
        "body": [
            "// Import the Events from ionic package ",
            "// Consume it in the constructor as 'events'",
            "captureEvent() {",
            "\tthis.events.subscribe('${1:object}:${2:event}', (${1:object}EventData) => {",
            "\t\t// userEventData is an array of parameters, so grab our first and only arg",
            "\t\tconsole.log(${1:object}EventData[0]);",
            "\t});",
            "}"
        ]
    },
    "ionic Reorder items in a list": {
        "prefix": "i2-reorder",
        "description": "ionic 2 Reorder an item in list",
        "body": [
            "// Import the reorderArray function from ionic package ",
            "// Don't forget to bind this function to the reorder list ",
            "reorderItems(indexes) {",
            "\tthis.items = reorderArray(this.items, indexes);",
            "}"
        ]
    },
    "Ionic action sheet": {
        "prefix": "i2-action-sheet",
        "description": "ionic 2 action sheet snippet Create and Consume",
        "body": [
            "let actionSheet = this.actionSheetCtrl.create({",
            "\ttitle: '${TM_FILENAME_BASE}',",
            "\tbuttons: [{",
            "\t\ttext: '${2:Destructive}',",
            "\t\trole: '${3|destructive, cancel|}',",
            "\t\thandler: () => {",
            "\t\t\tconsole.log('Destructive clicked');",
            "\t\t}",
            "\t}, {",
            "\t\ttext: '${3:Archive}',",
            "\t\thandler: () => {",
            "\t\t\tconsole.log('Archive clicked');",
            "\t\t}",
            "\t}, {",
            "\t\ttext: 'Cancel',",
            "\t\trole: 'cancel',",
            "\t\thandler: () => {",
            "\t\t\t${4:console.log('Cancel clicked');}",
            "\t\t}",
            "\t}",
            "\t]",
            "});",
            "actionSheet.present();"
        ]
    }
}